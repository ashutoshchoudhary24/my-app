https://getbootstrap.com/docs/5.3/components/alerts/
For deployment-https://create-react-app.dev/docs/deployment/
https://www.w3schools.com/react/react_router.asp
https://legacy.reactjs.org/docs/create-a-new-react-app.html


router components- imports, link-to, routes are commented/ removed from every .js file so that it can be hosted to github.
GitHub Pages doesn’t support routers that use the HTML5 pushState history API under the hood (for example, React Router using browserHistory). This is because when there is a fresh page load for a url like http://user.github.io/todomvc/todos/42, where /todos/42 is a frontend route, the GitHub Pages server returns 404 because it knows nothing of /todos/42. If you want to add a router to a project hosted on GitHub Pages, here are a couple of solutions:
You could switch from using HTML5 history API to routing with hashes. If you use React Router, you can switch to hashHistory for this effect, but the URL will be longer and more verbose (for example, http://user.github.io/todomvc/#/todos/42?_k=yknaj). Read more about different history implementations in React Router.
Alternatively, you can use a trick to teach GitHub Pages to handle 404s by redirecting to your index.html page with a custom redirect parameter. You would need to add a 404.html file with the redirection code to the build folder before deploying your project, and you’ll need to add code handling the redirect parameter to index.html. You can find a detailed explanation of this technique in this guide.

-------------------------------
Creating react app & .jsFiles description
-------------------------------
Under terminal -give command-  npx create-react-app my-app
where mp-app is the name of the app/main folder which will be created- inside which we see several other folders like 
-Node_module- It can deleted at any point and can be generated by "npm install".  It stores the packages and their dependencies that your project requires
Other imp Files and their use:
1. App.js : This is the main component of your React application. It contains the structure and logic for your app’s user interface. You can define the layout, components, and functionality within this file.

2. App.css : This file contains the CSS styles specific to the App.js component. It allows you to style the elements and apply visual formatting to your app.

3. index.js : This file is the entry point of your React application. It is responsible for rendering the root component (App.js) and attaching it to the HTML document. It sets up the React DOM and provides the initial rendering of your app.

4. index.css : This file contains global CSS styles that apply to the entire application. It allows you to define styles that should be applied globally, affecting all components within the app.

By separating the code into these files, it helps organize and modularize the application’s structure. App.js focuses on the component logic, App.css handles the styles specific to the App component, index.js sets up the rendering process, and index.css provides global styles. This separation allows for better code organization, reusability, and maintainability.
 

-----------------------------------------------------------------------------------------------
FEW SHORT DESCRIPTION ABOUT THE TOPICS COVERED 
-----------------------------------------------------------------------------------------------
JSX:
What is JSX in React?
JSX is a syntax extension for JavaScript recommended by React. It looks similar to XML/HTML and allows you to write HTML elements in your JavaScript code. JSX gets transpiled into JavaScript.

Explain the difference between JSX and HTML.
JSX allows embedding JavaScript expressions within curly braces, whereas HTML doesn't. JSX tags are transpiled to React.createElement calls.


Props:
What are props in React?
Props (short for properties) are used to pass data from a parent component to a child component in React. They are immutable and help in making components more dynamic and reusable.

How do you pass props to a component?
You can pass props by adding attributes to the JSX component. For example: <MyComponent propName={value} />.


State:
Explain the concept of state in React.
State is a mechanism for a React component to maintain and manage its internal data. When the state of a component changes, React re-renders the component to reflect the updated state.

What is the difference between props and state?
Props are passed from a parent component, and they are immutable. State is managed within the component and can be changed using setState().


Event Handling:
How do you handle events in React?
You can handle events in React using camelCase event names like onClick and onChange. Event handlers are functions that are passed as props and defined in the component.

Explain the concept of synthetic events in React.
Synthetic events are cross-browser wrappers around the browser's native events. They ensure consistent behavior and provide additional features. In React, event handlers receive synthetic events.


useState:
What is useState and how is it used in React?
useState is a React hook that allows functional components to have state. It returns an array with the current state value and a function to update it. Example: const [count, setCount] = useState(0).

How would you use multiple state variables with useState?
You can call useState multiple times to create different state variables. For example:
jsx
Copy code
const [name, setName] = useState('');
const [age, setAge] = useState(0);


React Router:
What is React Router, and why is it used in React applications?
React Router is a library for navigation in React applications. It enables the creation of single-page applications with navigation between different views or components.

Explain the difference between BrowserRouter and HashRouter in React Router.
BrowserRouter uses the HTML5 history API for cleaner URLs, while HashRouter uses the hash portion of the URL to keep the UI in sync with the URL.